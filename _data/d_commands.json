{
  weapon: {
    format: "${PREFIX}weapon [weapon name [vs ...]] [upgrade level] [str [dex [int [faith [luck]]]]]",
    desc: "Use this command to calculate the AR of any DS3 weapon, along with the expected damage on R1s/L1s, backstabs and ripostes.",

    perms: ["USER"],
    module: "DS3",

    canDM: true,
    canEdit: true,
    debug: true,

    parameters: [
      {
        param: "[weapon name]",
        values: [
          {
            value: "Dark Souls 3 weapon name",
            desc: "Should include infusion type if desired. Spelling is lenient."
          },
          {
            value: "null",
            desc: "If no weapon name is given, info on all weapons will be given."
          }
        ]
      },
      {
        param: "[upgrade level]",
        values: [
          {
            value: "Weapon upgrade level",
            desc: "For special weapons, UPGRADE LEVELS SHOULD BE CONVERTED TO STANDARD UPGRADE LEVEL EQUIVALENTS so weapons can be compared. In the format of '+2'"
          },
          {
            value: "null",
            desc: "If no upgrade level is given, the upgrade level of your set build will be used."
          }
        ]
      },
      {
        param: "[str [dex [int [faith [luck]]]]]",
        values: [
          {
            value: "Stat levels",
            desc: "List of stat levels given in order and separated by spaces or '/'s"
          },
          {
            value: "null",
            desc: "If no stat level is given, the corresponding stat level of your set build will be used."
          }
        ]
      }
    ],
    examples: [
      {
        command: "!weapon sharp claymore +7 16 35 10 10 10",
        desc: "The 1-hand/2-hand and weapon self-buff states can be toggled via appropriate reactions on the printout. The normal upgrade path input is used for special weapons; `!weapon black knight sword +10 20 18 10 10 10` will print out the data for a black knight sword at an upgrade level of +5.\n\nIn the case of an incomplete input, like `!weapon caestus`, the missing upgrade and stat data will be collected from the build you currently have set through the `!setbuild` command.\n\nThis command can also be used to compare up to four different weapons of a given upgrade level and stat combination. This is done by listing multiple weapons as the `[weapon name and infusion]` argument, separated by \"vs\"."
      },
      {
        command: "!weapon fire dagger vs chaos dagger +3 10 10 10 10 10",
        desc: "Note that the upgrade and stats need to be specified only once, and at the end.\n\nTyping out the command without a `[weapon name and infusion]` argument will make SlugBot calculate the overall ten best weapons based on expected R1 damage for the upgrade level and stats provided. The printout for this kind of input will include reactions to toggle between various weapon classes, along with the usual 1-hand/2-hand and self-buff options. SlugBot will also note if any of the weapons are usable only when 2-handed."
      }
    ]
  },
  
  addbuild: {
    format: "${PREFIX}addbuild [build name] [soul level] [upgrade level] <link>",
    desc: "Used to add a build to your build list. Stating `soul level`, `upgrade level` and `build planner link` are optional but recommended. If a soulsplanner link is suplied, any missing data will be taken from the build directly - often, all thats needed.",
    perms: ["USER"],
    canDM: true,
    canEdit: false,
    parameters: [
      {
        param: "[build name]",
        values: [
          {
            value: "Name of build",
            desc: "Unique identifier for build."
          }
        ]
      },
      {
        param: "[soul level]",
        values: [
          {
            value: "Soul level",
            desc: "Soul level of a Dark Souls build."
          },
          {
            value: "Blood level",
            desc: "Blood level of a Bloodborne build."
          }
        ]
      },
      {
        param: "[Upgrade level]",
        values: [
          {
            value: "Upgrade level",
            desc: "Weapon upgrade level of build."
          }
        ]
      },
      {
        param: "<link>",
        values: [
          {
            value: "DS1 SoulsPlanner link"
          },
          {
            value: "DS2 SoulsPlanner link"
          },
          {
            value: "DS3 SoulsPlanner link",
            desc: "All optional parameters will be filled in with the data from build planner link."
          },
          {
            value: "Bloodborne SoulsPlanner link"
          }
        ]
      },
    ],
    examples: [
      {
        command: "!addbuild Vilhelm's Squire SL60 +7 https://soulsplanner.com/darksouls3/1381",
        desc: "This will add a build by the name of 'Vilhelm's Squire' to the build list. If a build by the same name already exists in the list, its information will be updated with the new information stated."
      }, 
      {
        command: "!addbuild https://soulsplanner.com/darksouls3/1139",
        desc: "This will take the name, soul level, and upgrade level directly from the build linked."
      }
    ]
  },
  "removebuild": {
    format: "${PREFIX}removebuild <build id>",
    desc: "Used to remove a build from a your build list.",
    perms: ["USER"],
    canDM: true,
    canEdit: false,
    parameters: [
      {
        param: "<build id>",
        values: [
          {
            value: "build name"
          },
          {
            value: "build ID",
            desc: "Number of a build in the build list"
          }
        ]
      },
    ],
    examples: [
      {
        command: "!removebuild Vilhelm's Squire",
        desc: "This will remove the build 'Vilhelm's Squire' from the build list. Build name is case insensitive."
      }
    ]
  },
  build: {
    format: "${PREFIX}build [member]",
    desc: "Used to view your own build list or the build list of another member.",
    perms: ["USER"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "[member]",
        values: [
          {
            value: "Discord username of member"
          },
          {
            value: "Discord ID of member"
          },
          {
            value: "member mention"
          }
        ]
      },
    ],
    examples: [
      {
        command: "!build @Tikaro",
        desc: "This will show Tikaro's build list."
      }
    ]
  },

  addcommand: {
    format: "${PREFIX}addcommand <command> <response>",
    desc: "Used to add/edit a custom command that will respond with a specified string. alternatively regex can be used in place of a command to make SlugBot send a response message whenever the regex matches a members message.\n\nThe response can contain certain replacer flags that will be replaced will specific values when sent by slugbot.\n\nLINK TO REPLACER FLAGS SECTION",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "<command>",
        values: [
          {
            value: "New command string"
          },
          {
            value: "Existing command string",
            desc: "Will overwrite its response"
          },
          {
            value: "Regex keyword",
            desc: "indicated by a string starting and ending with `/`"
          }
        ]
      },
      {
        param: "<response>",
        values: [
          {
            value: "String",
            desc: "will be displayed when the custom command is used or the regex is matched"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!addcommand flip You flipped a coin and got ${rand:heads|tails}!",
        desc: "This will add a command that will respond with `You flipped a coin and got heads!` OR `You flipped a coin and got tails!` when the command `!flip` is used."
      },
      {
        command: "!addcommand /don't\\s@\\sme/ <@${id}>",
        desc: "This will create a regex keyword match that will respond with a discord mention whenever a message contains the string `don't @ me`."
      }
    ]
  },
  removecommand: {
    format: "${PREFIX}removecommand <command>",
    desc: "Used to remove an existing custom command.",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "<command>",
        values: [
          {
            value: "Existing command",
            desc: "Must match existing command exactly"
          },
          {
            value: "Existing regex keyword to remove",
            desc: "Must match existing command exactly"
          }
        ]
      }
    ],
    examples: [ 
      {
        command: "!removecommand ping",
        desc: "This will remove the custom command `!ping`."
      }
    ]
  },
  commands: {
    format: "${PREFIX}commands",
    desc: "Used to get a list of all custom commands in the server DMed to you.",
    perms: ["USER"],
    canDM: false,
    canEdit: false,
    parameters: [],
    examples: []
  },
  permissions: {
    format: "${PREFIX}permissions <command|score> [<whitelist|blacklist|remove> <channel|role|member>]",
    desc: "Use this command to add channels, roles, and members to a command's whitelist or blacklist. __WHITELISTS AND BLACKLISTS TAKE PRIORITY OVER DEFAULT COMMAND PERMISSIONS.__\n* A command can only be used in whitelisted channels. If There are no whitelisted channels, the command can be used in every channel.\n* A command can only be used by members with whitelisted roles. If There are no whitelisted roles, all roles can use the command.\n* A command can only be used by whitelisted members. If there are no whitelisted members, all members can use the command\n* A command can not be used in blacklisted channels.\n* A command can not be used by members with blacklisted roles.\n* A command can not be used by blacklisted members.\n\nIf `score` is stated instead of a command, constraints on who can receive score and where it will be given can be set.",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "<command|score>",
        values: [
          {
            value: "slugbot command name",
            desc: "The name of the command you wish to set permission constraints for."
          },
          {
            value: "score",
            desc: "The string `score` stating that constraints on when XP is given are to be set instead."
          }
        ]
      },
      {
      param: "<whitelist|blacklist|remove>",
        values: [
          {
            value: "slugbot command",
            desc: "The command you wish to set permission constraints for."
          }
        ],
      }
    ],
    examples: [
      {
        command: "!permissions weapon whitelist #bot-stuff",
        desc: "This will whitelist the channel `#bot-stuff` for the command `!weapon` - meaning the `!weapon` command can only be used in that channel."
      },
      {
        command: "!permissions score blacklist #bot-stuff",
        desc: "This will stop SlugBot from giving users XP for activity in the `#bot-stuff` channel."
      }
    ]
  },

  setrole: {
    format: "${PREFIX}setrole [<role to set> <reset | role name>]",
    desc: "Set roles for SlugBot to use. `!setrole` with no arguments will show information on which roles have been set.\n\nThe `mute` role will be created and set automatically on the first use of a mute command if a role was not already set beforehand.",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "<role to set>",
        values: [
          {
            value: "mute",
            desc: "Mute role (auto-generated)"
          },
          {
            value: "botAdmin",
            desc: "Bot admin role"
          },
          {
            value: "global",
            desc: "Role assigned to all members"
          },
          {
            value: "weeklytoprank",
            desc: "Role given to weekly top ranking member"
          },
          {
            value: "totaltoprank",
            desc: "Role given to top ranking member"
          },
          {
            value: "streamer",
            desc: "Role that adds members to the streamer list"
          },
          {
            value: "pc",
            desc: "PC platform role"
          },
          {
            value: "ps4",
            desc: "PS4 platform role"
          },
          {
            value: "xbox",
            desc: "XBox platform role"
          }
        ]
      },
      {
        param: "<reset | role name>",
        values: [
          {
            value: "reset",
            desc: "to reset the role for SlugBot"
          },
          {
            value: "role name",
            desc: "An existing role for slugbot to use"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!setrole totalTopRank Top Sleg",
        desc: "This will set totalTopRank to use a server role called 'Top Sleg'."
      },
      {
        command: "!setrole weeklyTopRank reset",
        desc: "This will unset the weeklyTopRank role, disabling any SlugBot functionality that uses the weeklyTopRank role."
      }
    ]
  },
  setchannel: {
  	format: "${PREFIX}setchannel [<channel to set> [reset]]",
    desc: "Set channels for SlugBot to use. Using this command with no arguments will show information on set channels.",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
    	{
    		param: "<channel to set>",
    		values: [
    			{
    				value: "welcome",
    				desc: "Channel used for welcome messages."
    			},
  				{
    				value: "default",
    				desc: "Channel used for Member Event reminders and weekly score winners."
    			},
    			{
    				value: "log",
    				desc: "Channel used for logging."
    			},
    			{
    				value: "leaderboard",
    				desc: "Channel used for the score leaderboard."
    			},
    			{
    				value: "stream",
    				desc: "Channel used for stream notifications."
    			},
    			{
    				value: "memberevents",
    				desc: "Channel used for member events."
    			},
    			{
    				value: "slugboard",
    				desc: "Channel used for the slugboard."
    			},
    			{
    				value: "micmuted",
    				desc: "Channel used for text channel that can only be used when a member is in a voice channel."
    			}
    		]
    	},
    	{
    		param: "[reset]",
    		values: [
    			{
    				value: "reset",
    				desc: "To reset a set channel."
    			}
    		]
    	}
    ],
    examples: [
      {
        command: "!setchannel welcome",
        desc: "This will set the channel the command was used in as the `welcome` channel for SlugBot."
      },
      {
        command: "!setchannel welcome reset",
        desc: "This will unset the welcome channel, disabling any SlugBot functionality that uses the welcome channel."
      }
    ]
  },
  setwelcomemessage: {
    format: "${PREFIX}setwelcomemessage [welcome message]",
    desc: "Use this command to customise the welcome message sent when a new member joins the server.\n\nUsing the command with no arguments will display the current welcome message along with a demo of how it will appear when a member joins.\n\nLINK TO REPLACER FLAGS SECTION",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "[welcome message]", 
        values: [
          {
            value: "String welcome message",
            desc: "Can include replacer flags (e.g. ${member})"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!setwelcomemessage welcome ${member} to the server!",
        desc: "`${member}` will be replaced with the new member's display name."
      }
    ]
  },

  streamer: {
    format: "${PREFIX}streamer <add | remove | list> <streamer name>",
    desc: "Use this command to add a streamer to the streams notification list or remove a streamer from the list. A notification message will be sent to the '#streams' channel (if set) when a streamer in the list goes live on twitch.tv. The notification gets deleted when the streamer goes offline again.",
    perms: ["BOT_ADMIN"],
    canDM: false,
    canEdit: false,
    parameters: [
      {
        param: "<add | remove | list>", 
        values: [
          {
            value: "add",
            desc: "specify to add streamer to list"
          },
          {
            value: "remove",
            desc: "specify to remove streamer to list"
          },
          {
            value: "list",
            desc: "specify to list all streamers"
          }
        ]
      },
      {
        param: "<streamer name>",
        values: [
          {
            value: "username",
            desc: "twitch.tv username. case insensitive"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!streamer add Florador",
        desc: "This will add twitch streamer 'Florador' to the notification list."
      },
      {
        command: "!streamer remove Florador",
        desc: "This will remove twitch streamer 'Florador' from the notification list."
      },
      {
        command: "!streamer list",
        desc: "This will list all streamers currently set to display when they go live."
      }
    ]
  },

  mute: {
    format: "${PREFIX}mute <member> [duration] [reason]",
    desc: "This command is used to mute members. Giving a duration and reason are optional. Not giving a duration will mute the user until they are manually unmuted. The member can be specified by ping, user ID or name.",

    perms: ["BOT_ADMIN"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<member>",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user to be muted"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user to be muted"
          },
          {
            value: "discord member mention",
            desc: "Mention member to be muted"
          }
        ]
      },
      {
        param: "[duration]",
        values: [
          {
            value: "Number",
            desc: "Number of minutes the mute should last for"
          }
        ]
      },
      {
        param: "[reason]",
        values: [
          {
            value: "String",
            desc: "reason for why the member was muted. Will be DMed to the member"
          }
        ]
      }
    ],    
    examples: [
      {
        command: "!mute 2340287340287 10 For reasons and stuff.",
        desc: "This will mute the member with ID 2340287340287 for 10 minutes and DM them the reason 'For reasons and stuff'."
      },
      {
      	command: "!mute",
      	desc: "With no arguments given, a list showing all muted members and their remaining mute times will be shown."
      }
    ]
  },
  unmute: {
    format: "${PREFIX}unmute <member>",
    desc: "Use this command to unmute a muted member.",

    perms: ["BOT_ADMIN"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<member>",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user to be muted"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user to be muted"
          },
          {
            value: "discord member mention",
            desc: "Mention member to be muted"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!unmute Alex_",
        desc: "This will unmute member 'Alex_' if they are muted."
      }
    ]
  },

  roleatlevel: {
    format: "${PREFIX}roleatlevel [<add|remove> <role name> <level> [send notification?]]",
    desc: "Use this command to set roles to be given to members once they reach a certain level. Using the command with no arguments will list all the roles and their levels at which they will be given.",

    perms: ["BOT_ADMIN"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<add|remove>",
        values: [
          {
            value: "add",
            desc: "specify to add new role-at-level"
          },
          {
            value: "remove",
            desc: "specify to remove existing role-at-level"
          }
        ]
      },
      {
        param: "<role name>",
        values: [
          {
            value: "role name",
            desc: "Case insensitive string containing a role name. can include spaces"
          },
          {
            value: "role mention",
            desc: "Discord role mention"
          }
        ]
      },
      {
        param: "<level>",
        values: [
          {
            value: "Integer",
            desc: "Corresponding to the level requirement of the role"
          }
        ]
      },
      {
        param: "[send notification?]",
        values: [
          {
            value: "true",
            desc: "Boolean value stating that a message should be sent in chat when the member reaches the required level"
          },
          {
            value: "false",
            desc: "Boolean value stating that a message should not be sent in chat when the member reaches the required level"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!roleatlevel add Slug 10",
        desc: "This will set the `slug` role to be given to any member with a level greater than or equal to 10."
      }
    ]
  },

  giveme: {
    format: "${PREFIX}giveme [add|remove] <role name>",
    desc: "Use this command to set roles to be self-assignable or toggle self-assignable roles. Using the command with no arguments will list all self-assignable roles.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[add|remove]",
        values: [
          {
            value: "add",
            desc: "specify to add new self-assignable role"
          },
          {
            value: "remove",
            desc: "specify to remove existing self-assignable role"
          }
        ]
      },
      {
        param: "<role name>",
        values: [
          {
            value: "role name",
            desc: "Case insensitive string containing a role name. can include spaces"
          },
          {
            value: "role mention",
            desc: "Discord role mention"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!giveme add slug",
        desc: "This will set the role `slug` as self-assignable as long as the role exists in the server."
      },
      {
        command: "!giveme slug",
        desc: "This will give the member the `slug` role if they don't already have it - or remove it if they do."
      }
    ]
  },

  avatar: {
    format: "${PREFIX}avatar [member]",
    desc: "Use this command to view a fullsized image of a members avatar. Use the command with no arguments to view a fullsized image of your own avatar.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[member]",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user to be muted"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user to be muted"
          },
          {
            value: "discord member mention",
            desc: "Mention member to be muted"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!avatar Tikaro",
        desc: "This will display Tikaro's avatar."
      }
    ]
  },

  help: {
    format: "${PREFIX}help [command]",
    desc: "Use this command to get info on how to use a specific command. Use the command with no arguments to get a link to this documentation.",
    perms: ["USER"],

    canDM: true,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[command]",
        values: [
          {
            value: "command",
            desc: "name of command to display information on"
          }
        ]
      }
    ],
    examples: [
      {
        command: "!help giveme",
        desc: "This will display documentation on the `giveme` command."
      }
    ]
  },

  math: {
    format: "${PREFIX}math <expression>",
    desc: "Use this command to calculate the value of a mathematical expression",

    perms: ["USER"],

    parameters: [
      {
        param: "<expression>",
        values: [
          {
            value: "mathematical expression",
            desc: "A resolvable mathematical expression"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!math 84^2 / pi",
        desc: "This will get a response with the value of the expression."
      }
    ]
  },

  igot: {
    format: "${PREFIX}igot [ds1|ds3] <souls received>",
    desc: "Use this command to get a readout containing the estimated level of another player killed in Dark Souls 1 or Dark Souls 3.",

    perms: ["USER"],

    canDM: true,
    canEdit: true,
    debug: false,

    parameters: [
      {
        param: "[ds1|ds3]",
        values: [
          {
            value: "ds1",
            desc: "specify to calculate the soul level of a Dark Souls 1 player."
          },
          {
            value: "ds3",
            desc: "specify to calculate the soul level of a Dark Souls 3 player."
          }
        ]
      },
      {
        param: "<souls received>",
        values: [
          {
            value: "Integer number",
            desc: "Corresponding to the number of souls you received when killing another player."
          }
        ]
      }
    ],

    examples: [
      {
        command: "!igot 1919",
        desc: "This show the possible soul level of a player depending on their phantom type.\n![igot-screenshot](images/igot_demo.png)"
      }
    ]
  },

  names: {
    format: "${PREFIX}nammes [member]",
    desc: "Use this command to get a list of past usernames and display names of a member. Use this command with no arguments to get a list of yourown past usernames and display names.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[member]",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user"
          },
          {
            value: "Mention member",
            desc: "discord member mention"            
          }
        ]
      }
    ],

    examples: [
      {
        command: "!avatar Tikaro",
        desc: "This will display Tikaro's avatar."
      }
    ]
  },

  filter: {
    format: "${PREFIX}filter <add|remove|list> <filter string>",
    desc: "Use this command to add or remove word filters in the current server. The filter string can either be a normal string or RegEx.\n\nWhen a member sends a message in the server containing the filter string, their message will be deleted, score will be deducted and there will be a random chance they will be muted. the mute chance increases each time the same member triggers the filter.\n\nIf a normal string is given, common letter substitutions will be taken into account.\n\nif RegEx is given, the matched message will be deleted but the member will not have score deducted or have a chance to be muted.",

    perms: ["BOT_ADMIN"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<add|remove|list>", 
        values: [
          {
            value: "add",
            desc: "specify to add new filter"
          },
          {
            value: "remove",
            desc: "specify to remove existing filter"
          },
          {
            value: "list",
            desc: "specify to list all filters"
          }
        ]
      },
      {
        param: "<filter string>",
        values: [
          {
            value: "String",
            desc: "normal string containing word(s) to be filtered"
          },
          {
            value: "RegEx",
            desc: "Regular expression to have messages deleted when matched"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!filter add snail",
        desc: "This will make SlugBot delete any messages containing the word 'snail', deduct score from the offending member and have a chance to mute them."
      },
      {
        command: "!filter add /\\d/",
        desc: "This will make SlugBot delete any messages containing any digit. (check [regex101](https://regex101.com/) for RegEx syntax and RegEx testing)"
      }
    ]
  },

  namecheck: {
    format: "${PREFIX}namecheck <name>",
    desc: "Use this command to check if a name will be censored by the Dark Souls 3 name filters. Will also show if the name is too long.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<name>",
        values: [
          {
            value: "String",
            desc: "containing a name to check against the Dark Souls 3 name filter"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!namecheck Knight Plumfinger",
        desc: "This will test the name \"Knight Plumfinger\" against the Dark Souls 3 name filter - showing how the censored name will appear in game.",
      }
    ]
  },

  pc: {
    format: "${PREFIX}pc",
    desc: "Use this command to toggle your PC platform role.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,
  },
  ps4: {
    format: "${PREFIX}ps4",
    desc: "Use this command to toggle your PS4 platform role.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,
  },
  xbox: {
    format: "${PREFIX}xbox",
    desc: "Use this command to toggle your XBox One platform role.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,
  },

  twitch: {
    format: "${PREFIX}twitch <twitch username>",
    desc: "Used to link a Discord account with a Twitch account. SlugBot will whisper a message to you on Twitch asking for confirmation of the link.\n\nThis link is a global link between the discord account and twitch account - meaning it will only need to be done once regardless of the number of servers you are in.\n\nLinking your Discord and Twitch accounts allows your build list to be synced across Discord and Twitch along with serveral other features.",

    perms: ["USER"],

    canDM: true,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<twitch username>",
        values: [
          {
            value: "Username",
            desc: "twitch.tv username. case insensitive"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!twitch smugslugbot",
        desc: "This will start the linking process between the Discord user of the command and the twitch account with specified username."
      }
    ]
  },

  rep: {
    format: "${PREFIX}rep <member> [amount of rep]",
    desc: "Use this command to view a members profile or give another member rep points.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<member>",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user"
          },
          {
            value: "Mention member",
            desc: "discord member mention"            
          }
        ]
      },
      {
        param: "[amount of rep]",
        values: [
          {
            value: "Integer number",
            desc: "Amount of rep to give to specified member"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!rep Tikaro 2",
        desc: "This will attempt to give member Tikaro 2 rep points."
      }
    ]
  },

  profile: {
    format: "${PREFIX}profile [member [flag|unflag]]|[wallpaper <img link>]|[color <hex color>]",
    desc: "Use this command to view members profiles or edit yourown. Use the command with no arguments to view yourown profile or specify a member to view their profile.\n\nUse `!profile wallpaper <img link>` to set an image as your profile wallpaper. The `<img link>` must be a direct link to an image.\n\nUse `!profile color <hex color>` to set the general text color for your profile. `<hex color>` must be a hex color code in the format of `#000` or `#000000`.\n\nModerators can also flag profile images as inappropriate using the format `!profile <@member> flag|unflag`. A flagged profile will no longer display its wallpaper in the server the command was used in. Using the command with the keyword unflag will allow the profile to display its wallpaper again.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[member]",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user"
          },
          {
            value: "Mention member",
            desc: "discord member mention"            
          }
        ]
      },
      {
        param: "[flag|unflag]",
        values: [
          {
            value: "flag",
            desc: "specify to flag a profile as inappropriate"
          },
          {
            value: "unflag",
            desc: "specify to unflag a profile as inappropriate"
          }
        ]
      },
      {
        param: "[wallpaper]",
        values: [
          {
            value: "wallpaper",
            desc: "specify that you would like to change your profile wallpaper"
          }
        ]
      },
      {
        param: "<img link>",
        values: [
          {
            value: "URL",
            desc: "A direct link to an image."
          }
        ]
      },
      {
        param: "[color]",
        values: [
          {
            value: "color",
            desc: "specify that you would like to change your profile's general text color"
          }
        ]
      },
      {
        param: "<hex color>",
        values: [
          {
            value: "color code",
            desc: "In hexadecimal"
          }
        ]
      }
    ],

    examples: [
      {
        command: "",
        desc: ""
      }
    ]
  },

  rank: {
    format: "${PREFIX}rank [member]",
    desc: "Use this command with no arguments to view your own profile - displaying score and rank. Specify a member to view their profile.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[member]",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user"
          },
          {
            value: "Mention member",
            desc: "discord member mention"            
          }
        ]
      }
    ],

    examples: [
      {
        command: "!rank Tikaro",
        desc: "This will display Tikaro's profile with server rank and weekly rank if applicable."
      }
    ]
  },

  roll: {
    format: "${PREFIX}roll [avg] <dice count>D<dice type> [modifier]",
    desc: "Use this command to get SlugBot to roll dice. Including the `avg` flag will return a readout displaying statistical information on the roll instead.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "[avg]",
        values: [
          {
            value: "avg",
            desc: "Specify that statistical information should be displayed instead"
          }
        ]
      },
      {
        param: "<dice count>",
        values: [
          {
            value: "Integer number",
            desc: "Corresponding to the number of dice to roll"
          }
        ]
      },
      {
        param: "<dice type>",
        values: [
          {
            value: "Integer number",
            desc: "Corresponding to the type of dice to roll"
          }
        ]
      },
      {
        param: "[modifier]",
        values: [
          {
            value: "Integer number",
            desc: "Corresponding to a value to add or subtract from the total roll"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!roll 4d6 - 2",
        desc: "This will roll four D6s, subtract 2, then display the outcome."
      },
      {
        command: "!roll avg 4d6",
        desc: "This will display the statistics of rolling four D6s."
      }
    ]
  },

  remindme: {
    format: "${PREFIX}remindme to <reminder message> in <time until reminder>",
    desc: "Use this command to create a reminder. SlugBot will DM you after a specified amount of time with the `<reminder message>`",

    perms: ["USER"],

    canDM: true,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<reminder message>",
        values: [
          {
            value: "String",
            desc: "Containing a reminder message"
          }
        ]
      },
      {
        param: "<time until reminder>",
        values: [
          {
            value: "String",
            desc: "A string containing an amount of time. e.g. `5 days, 3 hours and 10 minutes`"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!remindme to Update the SlugBot music module in 1y 2d 15m",
        desc: "This will send a DM with the message \"Update the SlugBot music module\" in one year, two days, and 15 minutes."
      }
    ]
  },

  whowas: {
    format: "${PREFIX}whowas <character name>",
    desc: "Use this command to find the owner of a character you met in-game, along with more info on their build.\n\nNumbered reactions 1-5 will be displayed, allowing you to select a build to preview from the list of builds with similar names to the one specified.\n\nSlugBot will attempt to find five builds in its database with the most similar names.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<character name>",
        values: [
          {
            value: "String",
            desc: "Approximate name of a character"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!whowas Amil of the Deep",
        desc: "This will show 5 builds from SlugBots build database that most closely match the name `Amil of the Deep`."
      }
    ]
  },

  deletemessages: {
    format: "${PREFIX}deletemessages <member> <number of messages>",
    desc: "Used to delete messages sent by a specific member.",

    perms: ["BOT_ADMIN"],

    canDM: false,
    canEdit: true,
    debug: false,

    parameters: [
      {
        param: "<member>",
        values: [
          {
            value: "Username",
            desc: "Discord username of the user"
          },
          {
            value: "discord ID",
            desc: "discord ID of the user"
          },
          {
            value: "Mention member",
            desc: "discord member mention"            
          }
        ]
      },
      {
        param: "<number of messages>",
        values: [
          {
            value: "Number",
            desc: "Integer value stating the number of messages to delete"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!deletemessages alex_ 50",
        desc: "This will delete the last 50 messages sent by Alex_."
      }
    ]
  },

  guildinfo: {
    format: "${PREFIX}guildinfo",
    desc: "Displays info about this guild - including server age, member count, and welcome message.",

    perms: ["BOT_ADMIN"],

    canDM: false,
    canEdit: false,
    debug: false,
  },

  slugballs: {
    format: "${PREFIX}slugballs <question>",
    desc: "Use this command to ask SlugBot a question, like a magic eight ball - only more rude.",

    perms: ["USER"],

    canDM: true,
    canEdit: true,
    debug: false,

    parameters: [
      {
        param: "<question>",
        values: [
          {
            value: "String",
            desc: "The question you wish to ask SlugBot."
          }
        ]
      }
    ],

    examples: [
      {
        command: "!slugballs Should I play dark souls?",
        desc: "This will make SlugBot respond with an answer to the question."
      }
    ]
  },

  iam: {
    format: "${PREFIX}iam <member event info>",
    desc: "Use this command to create a notification for a Member Event (such as a dry finger run).\n\nProvide at least a location and what you are doing there. *Passwords and character names must be in quotes*. If you have multiple platform roles, remember to state which one the event will be on. How you word it doesn't matter too much - type out your member event info as if you were telling a human.\n\nYou can update the information in the member event without having to re-enter everything again. Simply use the command again and specify your updates.\n\nYou can add extra event information by including `info: \"<extra info here>\"` when using the command.\n\nIf you have a build set using [!setbuild](#setbuild), The relevant build information will be displayed in the member event automatically\n\nUse `!iam done` command to end the event.",

    perms: ["USER"],

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "<member event info>",
        values: [
          {
            value: "Game type",
            desc: "Description of the type of the member event. e.g. `dry finger run` or `invading`"
          },
          {
            value: "Location",
            desc: "Approximate name of location in which the member event will be taking place."
          },
          {
            value: "Soul level",
            desc: "Description of soul level. e.g. `sl81` or `soul level 90`"
          },
          {
            value: "Weapon upgrade level",
            desc: "Description of upgrade level. e.g. `+10`"
          },
          {
            value: "Password",
            desc: "Description of password that should be used. e.g. `password is: \"slug\".`"
          },
          {
            value: "character name",
            desc: "Description of your in-game name. e.g. `character is called \"The Balance\".`"
          },
          {
            value: "Extra info",
            desc: "Description of your extra information about the event. e.g. `info: \"Will only be summoning mad phantoms.\".`"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!iam dry fingered in the archives. soul level 81 +10. character name \"The Balnace\", password: \"slug\"",
        desc: "This will create a member Event notification in all member event channels, stating where you are, what you are doing, your soul level, upgrade level, character name, and password."
      },
      {
        command: "!iam now SL90 at the ringed city streets.",
        desc: "!his will update the soul level and location, leaving everything else unchanged."
      },
      {
        command: "!iam done",
        desc: "This will end the member event - deleting all notifications across all servers the event was displayed in."
      }
    ]
  },

  setbuild: {
    format: "${PREFIX}setbuild <build name|build number>",
    desc: "Use this command to set your current build from your list of added builds.",

    perms: ["USER"],

    canDM: true,
    canEdit: true,
    debug: false,

    parameters: [
      {
        param: "<build name|build number>",
        values: [
          {
            value: "build name",
            desc: "Approximate name of an added build"
          },
          {
            value: "build number",
            desc: "Number of build in your build list"
          }
        ]
      }
    ],

    examples: [
      {
        command: "!setbuild Knight Laran",
        desc: "This will set your current build to Knight Laran as long as its in your build list."
      }
    ]
  },

  placeholder: {
  	cmd: "",
    format: "",
    desc: "",

    perms: ["USER", "BOT_ADMIN"],
    moduleId: "",

    canDM: false,
    canEdit: false,
    debug: false,

    parameters: [
      {
        param: "",
        values: [
          {
            value: "",
            desc: ""
          }
        ]
      }
    ],

    examples: [
      {
        command: "",
        desc: ""
      }
    ]
  }
}

